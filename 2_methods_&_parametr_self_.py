# в любом классе кроме атрибутов ещё можно определять методы классов. Определим для начала простейший
# метод, который не будет иметь даже параметра self. И попробуем его запустить от имени класса

class Point:
    color = 'red'
    circle = 2

    def set_coords():
        print("вызов метода set_coords")


# вызов метода без скобок вернёт нам ссылку на объект функции(этого метода)
print(Point.set_coords)  # <function Point.set_coords at 0x0000026B4658B760>

# а вызов со скобками запустит уже сам метод и вернёт результат:
print(Point.set_coords())  # вызов метода set_coords

# создадим объект

pt = Point()

# проробуем получить ссылку на объект функции set_coord через объект
pt.set_coords  # <bound method Point.set_coords of <__main__.Point object at 0x0000022BE9AA78B0>>


# но если вызвать эту ф-цию через объект, то получим ошибку, потому что если метод вызывается от имени
# объекта, то он должен в качестве первого аргумента принимать ссылку на этот объект - self. Поэтому
# класс и его метод надо переопределять для этого:


class Point:
    color = 'red'
    circle = 2

    def set_coords(self):  # добавляем self
        print("вызов метода set_coords")


pt = Point()
pt.set_coords()  # вызов метода set_coords

# Поскольку теперь мы переопределили метод, предоставив ему аргумент self, то при вызове метода от
# имени класса уже нельзя прописать Point.setcood() без аргументов т.к. ожидается как минимум один
# аргумент. Поэтому в данном случае надо явно передать в качестве аргумента объект pt:

Point.set_coords(pt)  # вызов метода set_coords


# И теперь поскольку self это ссылка на сам объект, то мы можем через методы создавать локальные
# св-ва объектов посредством определения в этом методе динамического создания св-в объекта self.св-во.
# В данном случае это будет, забегая вперёд, некий простейший инициализатор:

class Point:
    color = 'red'
    circle = 2

    def set_coords(self, x, y):
        self.x = x
        self.y = y


pt = Point()
pt2 = Point()
pt.set_coords(1, 2)
pt2.set_coords(10, 20)
print(pt.__dict__, pt2.__dict__)  # {'x': 1, 'y': 2} {'x': 10, 'y': 20} сформировались св-ва


# x, y у двух независимых объектов

# так же можно прописать метод, который например выводит координаты

class Point:
    color = 'red'
    circle = 2

    def set_coords(self, x, y):
        self.x = x
        self.y = y

    def get_coords(self):
        return self.x, self.y


pt = Point()
pt2 = Point()
pt.set_coords(1, 2)
pt2.set_coords(10, 20)
print(pt.get_coords())  # (1, 2)
print(pt2.get_coords())  # (10, 20)

# все методы определённые в классе являются по сути его атрибутами. Поэтому к ним так же можно
# обращаться при помощи метода getattr:
f = getattr(pt, 'get_coords')  # тут мы переменной f присваиваем ссылку на объект ф-ции getattr
# и теперь нам остаётся сделать вызов
print(f())  # (1, 2)
