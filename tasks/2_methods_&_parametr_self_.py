# Объявить класс Point.
#
# Определить в нём атрибуты color = 'red' и circle = 2 класса Point.
#
# Определить метод set_coords без параметра self который просто выводит: "Вызов метода set_coords".
#
# Продублировать всё это в python console и обратиться к методу set_coords через имя класса без скобок,
# посмотреть результат вывода.
#
# Обратиться к методу set_coords через имя класса со скобками.
#
# Создать экземпляр этого класса pt.
#
# Обратиться к методу set_coords через имя объекта pt без скобок.
#
# Обратиться к методу set_coords со скобками и получить ошибку. (Подаётся 1 невидимый аргумент (self), но в методе
# не определено никаких аргументов)
#
# Прописать в методе set_coords параметр self и в выводе метода "Вызов метода set_coords" добавить конкатенацией
# вывод строчного представления ссылки self.
#
# Пересоздать экземпляр pt т.к. класс и метод изменились и вызвать снова этот метод. Убедиться что выводимы
# адрес self в точности совпадает с адресом объекта pt в правом окне python console.
#
# Теперь попробовать вызвать этот метод через имя класса и получить ошибку т.к. теперь метод ожидает аргумент,
# но в данном случае python не передаёт неявно никаких аргументов при вызове из класса.
#
# Теперь попробовать вызвать этот метод через имя класса передав в качестве аргумента объект pt. Убедиться,
# что всё работает.
#
# Добавить в метод функционал, что бы он создавал объектам класса свойства x и y.
#
# Вызвать метод set_coords через имя объекта и дать ему параметры 1 и 2.
#
# Вывести все локальные свойства экземпляра pt дандер-методом.(Убедиться что создались x = 1 и y = 2)
#
# Создать экземпляр pt2 и вызвать для него метод set_coords с параметрами 10, 20 и тоже вывести эго лок. св-ва.
# Убедиться что переменные x и y нашего метода работают совершенно независимо для разных объектов.
#
# Определить метод get_coords который будет возвращать текущие координаты и вывесит их с помощью этого метода.
#
# Вывести те же данные через метод getattr, используя в качестве аргумента задаваемого методу метод get_coords
# поскольку он по сути тоже является атрибутом класса.
#
#
#