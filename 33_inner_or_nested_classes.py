# Вложенные классы нужны в частности когда по той или иной необходимости есть два свойства с одинаковыми
# именами (ordering). Что бы не было конфликта имён их как раз можно определить во внешнем и вложенном классе.
# Поскольку при этом образуется новое простарнство имён в классе Meta конфликта имён не будет
# создадим вложенный класс Meta:

class Women:
    title = 'объект класса для поля title'
    photo = 'объект класса для поля photo'
    ordering = 'объект класса для поля ordering'


    class Meta: # -> вложенный класс
        ordering = ['id'] # свойство с таким же именем что и во внешем классе в новом пространстве имён


# как можно обращаться к этим свойствам?:

print(Women.ordering) # обращаемся к внешему св-ву -> 'объект класса для поля ordering'
print(Women.Meta.ordering) # обращаемся к вложенному -> ['id']


# так же можно создать экземпляр класса и обращаться к этим св-вам от него:
w = Women()
print(w.ordering) # объект класса для поля ordering
print(w.Meta.ordering) # ['id']

# но у экземпляра w естесственно нет никаких локальных св-тв т.к. не прописан инициализатор в классе:
print(w.__dict__) # - {}
# пропишем иницализатор чтоб создать локальные св-ва:

class Women:
    title = 'объект класса для поля title'
    photo = 'объект класса для поля photo'
    ordering = 'объект класса для поля ordering'

    def __init__(self, user, psw):
        self._user = user
        self._psw = psw

    class Meta: # вложенный класс
        ordering = ['id']


w = Women('root', '1234')
print(w.__dict__) # - {'_user': 'root', '_psw': '1234'}

# в описаном выше примере создаётся только объект класса Women. Если необходимо создать именно объект класса Meta,
# нужно определить его создание в иницализаторе класса Women:


class Women:
    title = 'объект класса для поля title'
    photo = 'объект класса для поля photo'
    ordering = 'объект класса для поля ordering'

    def __init__(self, user, psw):
        self._user = user
        self._psw = psw
        self.meta = self.Meta(user + '@' + psw) # инициализация создания экземпляра класса Meta <meta = Meta(user + '@' + psw)>

    class Meta: # вложенный класс
        ordering = ['id']

        def __init__(self, access): # инициализатор для создания локальных св-в экземпляра класса Meta
            self._access = access


w = Women('root', '1234')
print(w.__dict__) # - {'_user': 'root', '_psw': '1234'}
print(w.meta.__dict__) # -> {'_access': 'root@1234'}









