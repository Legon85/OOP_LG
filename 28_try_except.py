# допустим есть последовательность действий в программе в виде вывода сроковой информации:
print("Я к вам пишу - чего же боле?")
print("Что я могу еще сказать?")
print("Теперь, я знаю, в вашей воле")
print("Меня презреньем наказать.")
print("Но вы, к моей несчастной доле")
print("Хоть каплю жалости храня,")
print("Вы не оставите меня.")
print()
# если вставить в середину какую-нибудь неправильную команду, то, после выполнения первых трёх строк,
# выведется ошибка (исключение) NameError:(раскомент.для проверки)

print("Я к вам пишу - чего же боле?")
print("Что я могу еще сказать?")
print("Теперь, я знаю, в вашей воле")
# print(a) # -> NameError: name 'a' is not defined
print("Меня презреньем наказать.")
print("Но вы, к моей несчастной доле")
print("Хоть каплю жалости храня,")
print("Вы не оставите меня.")
print()

# исключения бывают разные. Например если вставить туда деление на 0,то будет исключение ZeroDivisionError^

print("Я к вам пишу - чего же боле?")
print("Что я могу еще сказать?")
print("Теперь, я знаю, в вашей воле")
# 1 / 0 # -> ZeroDivisionError: division by zero
print("Меня презреньем наказать.")
print("Но вы, к моей несчастной доле")
print("Хоть каплю жалости храня,")
print("Вы не оставите меня.")
print()

# ест 2 вида исключпений : исключения в процессе выполнения программы(что описано выше), а есть ошибки при компилляции
# например если нарушить синтаксис и пунктуацию кода, то это будет ошибка при компилляции(до исполнения кода):
# IndentationError: unexpected indent

print("Я к вам пишу - чего же боле?")
print("Что я могу еще сказать?")
print("Теперь, я знаю, в вашей воле")
 # 1 / 0 # -> IndentationError: unexpected indent
print("Меня презреньем наказать.")
print("Но вы, к моей несчастной доле")
print("Хоть каплю жалости храня,")
print("Вы не оставите меня.")
print()
# Что касается  ОБРАБОТКИ ИСКЛЮЧЕНИЙ, то это относится к исключениям в момент исполнения кода!!!
# например откроем имеющийся в текущей папке файл except_test_file.txt
f = open("except_test_file.txt") # -> ошибок нет
print()
# но если неправильно напечатет пользователь имя файла, то получим ошибку(раскомент)
# f = open("except_test_file22.txt") # -> FileNotFoundError: [Errno 2] No such file or directory: 'except_test_file22.txt'

# для этого существуют средства обработки исключпений (try/except), на случай елси предположительно в том или ином месте
# могут возникать те или иные ошибки:

try:
    f = open("except_test_file22.txt")
except FileNotFoundError:
    print("Невозможно открыть файл")
print("Штатное завершение")

# другой пример:
try:
    x, y = map(int, input().split())
except ValueError:
    print("Ошибка типа данных")
print("Штатное завершение")
# в данном случае если пользователь введёт целые числа, то всё отработает нормально. Но елси он введёт например буквы a и b
# то получим ошибку  -> ValueError: invalid literal for int() with base 10: 'a'

# но если добавить в код, например деление на ноль, то мы уже получим ZeroDivisionError, при этом ошибка ValueError
# отлавлисаться не будет: (раскоментить)
try:
    x, y = map(int, input().split())
    # res = x / y # -> ZeroDivisionError: division by zero
except ValueError:
    print("Ошибка типа данных")
print("Штатное завершение")

# чтоб отлавливались обе ошибки нужно добавить еще один except с ZeroDivisionError ниже:

try:
    x, y = map(int, input().split())
    res = x / y
except ValueError:
    print("Ошибка типа данных")
except ZeroDivisionError:
    print("Деление на ноль")
print("Штатное завершение")


