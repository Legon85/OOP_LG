# все объекты в python : False, "Hello", 123, 56.78, [1, 2, 3], {5:'отлично'}  образованы от оответствующих
# классов: bool, str, int, floar, list, dict.  Но! классы в pyhton тоже являются объектами! поскольку в
# python всё - объекты. Тогда от чего обарзуются эти объекты? - От метаклассов. Которые в свою очередь тоже
# являются объектами, но объектами особого рода, которые нельзя динамически порождать каким-либо ещё классом выше
# (Мета-метаклассом например). То етсь метаклассы находятся на вершине иерархии
# Что является Метаклассом в Pyhton? - Объект type, который использовался для определения типов объектов!
# Но это елси он вызывается с 1 аргументом. Но если передать ему 3 аргумента type(name, bases, dct) - >
# type(имя класса, список родительских классов, словарь с атрибутами) , то данный объект начинет работать
# подругому- динамически создаёт новый класс(тип данных)

print(type(int)) # -> <class 'type'> по сути тут мы получаем, что  тип класса int есть type(тот самый Метакласс)
print(type(str)) # -> <class 'type'>

# если прописать простейший собственный класс, и вызвать type от него:
class A: pass
print(type(A)) # -> <class 'type'> он тожеж образовался от метакласса type

# попробуем теперь создать с помощью конструкции метакласса простейший класс  Point c атирбутами  MAX_COORD = 100
# MIN_COORD = 0

A = type('Point', (), {'MAX_COORD': 100, 'MIN_COORD': 0})
print(A) # -> <class '__main__.Point'> класс создан

# создадим экземпляр класса Point через ссылающюся на него переменную A
pt = A()
print(pt.MAX_COORD) # - 100 теперь можно обращаться к атрибутам
print(pt.MIN_COORD) # - 0

# так же при необходимости можно прописывать родительские классы:
class B1: pass
class B2: pass

A = type('Point', (B1, B2), {'MAX_COORD': 100, 'MIN_COORD': 0}) # вписали базовые классы
# выведем список иерархии наследования чтоб убедиться в создании базовых классов
print(A.__mro__) # -> (<class '__main__.Point'>, <class '__main__.B1'>, <class '__main__.B2'>, <class 'object'>)

# теперь в качестве атрибутов для класса укажем какой-либо метод (method1)

def method1(self):
    """возвращает словарь с локальными атрибутами экземляра"""
    print(self.__dict__)

A = type('Point', (B1, B2), {'MAX_COORD': 100, 'method1': method1})
pt = A()
pt.method1() # - {} вызвали метод вернувший словарь с локальными атрибутами экземпляря

# так же в качестве атрибута можно указать lambda функцию:
A = type('Point', (B1, B2), {'MAX_COORD': 100, 'method1': lambda self: self.MAX_COORD})
pt = A()
print(pt.method1()) # -> 100